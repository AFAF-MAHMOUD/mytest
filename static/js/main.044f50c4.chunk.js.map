{"version":3,"sources":["posts.js","usercard.js","userlist.js","comments.js","App.js","serviceWorker.js","index.js"],"names":["Posts","props","state","posts","params","this","match","axios","get","then","res","postsPerUser","data","filter","post","userId","id","setState","className","map","to","src","title","body","Component","UserCard","user","alt","username","company","catchPhrase","UserList","users","Comment","comments","commentPerPost","postId","el","name","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uTA+CeA,E,YA3CX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEC,MAAO,IAFP,E,iFAIE,IAAD,OACCC,EAAaC,KAAKJ,MAA3BK,MAASF,OACjBG,IAAMC,IAAI,8CACLC,MAAK,SAAAC,GACF,IAAMC,EAAeD,EAAIE,KAAKC,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUX,EAAOY,MACnE,EAAKC,SAAS,CACVd,MAAOQ,S,+BAMnB,OACI,yBAAKO,UAAU,aAEPb,KAAKH,MAAMC,MAAMgB,KAAI,SAAAL,GACjB,OAEI,yBAAKI,UAAU,QACX,kBAAC,IAAD,CAAME,GAAE,oBAAeN,EAAKE,KACxB,yBAAKE,UAAU,YAEX,yBAAKA,UAAU,WAAWG,IAAI,gHAElC,yBAAKH,UAAU,cAAf,IAA6B,gCAAMJ,EAAKQ,QACxC,yBAAKJ,UAAU,aAAf,IAA4B,qCAAWJ,EAAKS,KAAhB,kB,GA9B5CC,aCmBLC,EApBC,SAAC,GAAU,IAATC,EAAQ,EAARA,KACd,OACI,yBAAKR,UAAU,aAEP,yBAAKA,UAAU,MAAMG,IAAI,iGAAiGM,IAAK,KAC/H,yBAAKT,UAAU,aACZ,yBAAKA,UAAU,QAAO,gCAAMQ,EAAKE,WACjC,yBAAKV,UAAU,eAAf,IAA8B,gCAAMQ,EAAKG,QAAQC,cACjD,yBAAKZ,UAAU,OACX,kBAAC,IAAD,CAAME,GAAE,iBAAYM,EAAKV,KAC1B,gCAAS,+CCiBhBe,E,YAzBX,WAAY9B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAC8B,MAAM,IAFL,E,iFAIE,IAAD,OAChBzB,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACF,EAAKO,SAAS,CACVe,MAAMtB,EAAIE,Y,+BAKlB,OACI,yBAAKM,UAAU,aACVb,KAAKH,MAAM8B,MAAMb,KAAI,SAAAO,GAClB,OACI,kBAAC,EAAD,CAAUA,KAAMA,Y,GAlBhBF,aCiCTS,E,YAjCX,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CAAEgC,SAAU,IAFV,E,iFAIE,IAAD,OACC9B,EAAaC,KAAKJ,MAA3BK,MAASF,OACjBG,IAAMC,IAAI,iDACLC,MAAK,SAAAC,GAEF,IAAMyB,EAAiBzB,EAAIE,KAAKC,QAAO,SAAAC,GAAI,OAAIA,EAAKsB,QAAUhC,EAAOY,MACrE,EAAKC,SAAS,CACViB,SAAUC,S,+BAMtB,OACI,yBAAKjB,UAAU,gBACVb,KAAKH,MAAMgC,SAASf,KAAI,SAAAkB,GAC1B,OACK,yBAAKnB,UAAU,WACX,4BAAKmB,EAAGC,MACR,4BAAKD,EAAGd,e,GAxBVC,aCmBPe,MAff,WACE,OACE,kBAAC,IAAD,KACA,yBAAKrB,UAAU,OACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,IAAcC,UAAWX,IAC3C,kBAAC,IAAD,CAAOS,OAAK,EAACC,KAAK,aAAcC,UAAW1C,IAC3C,kBAAC,IAAD,CAAOyC,KAAK,gBAAoBC,UAAWT,QCD/BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASxC,MACvB,2DCZNyC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.044f50c4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport { Link } from 'react-router-dom';\r\nclass Posts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { posts: [] }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get(\"https://jsonplaceholder.typicode.com/posts\")\r\n            .then(res => {\r\n                const postsPerUser = res.data.filter(post => post.userId == params.id)\r\n                this.setState({\r\n                    posts: postsPerUser\r\n                })\r\n            })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='list-post'>\r\n                {\r\n                    this.state.posts.map(post => {\r\n                        return (\r\n\r\n                            <div className='post'>\r\n                                <Link to={`/comments/${post.id}`}>\r\n                                    <div className=\"post-img\">\r\n\r\n                                        <img className=\"post-img\" src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQFmZ3qNMV_4LliBbUKVZsx3RPhABkf53XKiKW9BTlXHk5hl2PL&s\" />\r\n                                    </div>\r\n                                    <div className=\"post-title\"> <h3> {post.title}</h3></div>\r\n                                    <div className=\"post-body\"> <h5>      {post.body}   </h5></div>\r\n                                </Link>\r\n                            </div>\r\n\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Posts;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nconst UserCard =({user})=>{\r\n    return(\r\n        <div className=\"user-card\">\r\n           \r\n                <img className=\"img\" src=\"https://www.istockphoto.com/resources/images/HomePage/Tiles/FR/illustrations-809856656_sml.jpg\" alt =\"\"/>\r\n                <div className='user-info'>\r\n                   <div className=\"name\"><h3> {user.username}</h3></div>\r\n                   <div className=\"description\"> <h4> {user.company.catchPhrase}</h4></div>\r\n                   <div className=\"btn\">\r\n                       <Link to={`/posts/${user.id}`}>\r\n                      <button ><h2>following</h2></button>\r\n                      </Link>\r\n                      </div>\r\n                    \r\n                </div>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\nexport default UserCard;\r\n","import axios from 'axios';\r\nimport  React,{Component} from 'react';\r\nimport UserCard from './usercard';\r\nclass UserList  extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {users:[]  }\r\n    }\r\n    componentDidMount() {\r\n        axios.get(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(res=>{\r\n            this.setState({\r\n                users:res.data\r\n            })\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <div className=\"user-list\">\r\n                {this.state.users.map(user=>{\r\n                    return(\r\n                        <UserCard user={user}/>\r\n                    )\r\n                })}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default UserList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nclass Comment extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { comments: [] }\r\n    }\r\n    componentDidMount() {\r\n        const { match: { params } } = this.props;\r\n        axios.get('https://jsonplaceholder.typicode.com/comments')\r\n            .then(res => {\r\n\r\n                const commentPerPost = res.data.filter(post => post.postId == params.id)\r\n                this.setState({\r\n                    comments: commentPerPost\r\n                })\r\n\r\n            })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='list-comment'>\r\n                {this.state.comments.map(el =>{\r\n               return(\r\n                    <div className='comment'>\r\n                        <h3>{el.name}</h3>\r\n                        <h5>{el.body}</h5>\r\n                    </div>)\r\n                })\r\n               \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comment;\r\n","import React from 'react';\nimport {BrowserRouter,Route} from 'react-router-dom';\nimport './App.css';\nimport Posts from './posts';\nimport  UserList from './userlist';\nimport Comment from './comments';\nfunction App() {\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n      <div className=\"main\">\n        <Route exact path=\"/\"           component={UserList}/>\n        <Route exact path=\"/posts/:id\"  component={Posts} />\n        <Route path=\"/comments/:id\"     component={Comment}/>\n      </div>\n     \n    </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}